/*
 * Album Store API
 *
 * CS6650 Fall 2023
 *
 * API version: 1.0.0
 * Contact: i.gorton@northeasern.edu
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	// "log"
	"net/http"
	"encoding/json"
	"github.com/gorilla/mux"
	"fmt"
	"io"
)

type Album struct {
	Key    string `json:"albumKey"`
	Title   string `json:"title"`
	Artist string `json:"artist"`
	Year   string `json:"year"`  
}

type Response struct {
	AlbumID   string `json:"albumID"`
	ImageSize string `json:"imageSize"`  // String to match client's expectation
}

func getFileSize(file io.Seeker) (int64, error) {
	position, err := file.Seek(0, io.SeekEnd)
	if err != nil {
		return 0, err
	}
	_, err = file.Seek(0, io.SeekStart)
	if err != nil {
		return 0, err
	}
	return position, nil
}

func GetAlbumByKey(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	albumID := vars["albumID"]  // Extract albumID from the URL

	// Assume you have a function GetAlbum that takes an albumID and returns an Album object
	// Replace this dummy data with actual data fetching logic
	dummyAlbums := map[string]Album{
		"1": {Key: "1", Title: "Album 1", Artist: "Artist 1", Year: "2001"},
		"2": {Key: "2", Title: "Album 2", Artist: "Artist 2", Year: "2002"},
	}

	album, albumExists := dummyAlbums[albumID]
	if !albumExists {
		http.Error(w, "Album not found", http.StatusNotFound)
		return
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(album)
}
 
func NewAlbum(w http.ResponseWriter, r *http.Request) {
	err := r.ParseMultipartForm(10 << 20) // limit your maxMultipartMemory
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	file, _, err := r.FormFile("image")
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	defer file.Close()

	// profile := r.FormValue("profile")
	// fmt.Printf("Profile: %s\n", profile)

	// var albumProfile AlbumsProfile
	// err = json.Unmarshal([]byte(profile), &albumProfile)
	// if err != nil {
	// 	http.Error(w, err.Error(), http.StatusBadRequest)
	// 	return
	// }

	fileSize, err := getFileSize(file)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	response := Response{
		AlbumID:   "6789",  // You might want to generate this dynamically or fetch it from somewhere
		ImageSize: fmt.Sprintf("%d", fileSize),
	}
	// Assume CreateAlbum creates a new album
	// createdAlbum := Album{Key: "6789", Title: albumProfile.Title, Artist: albumProfile.Artist}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusCreated)
	json.NewEncoder(w).Encode(response)

	// fmt.Printf("Response: %+v\n", response)
	// json.NewEncoder(w).Encode(response)
}
 